import numpy as np
import scipy.io as scio
from DSO import DSO
from agentc import agentc
from agentu import agentu
from agentw import agentw


# get setup_data
# data = scio.loadmat('setup.mat')
# print(data)
Node = 9
Agent = 10
dso = 1
k = 1
resultrp = []
resultrr = []
resultsp = []
resultsr = []
# 使用NumPy创建一个长度Node的一维NumPy数组
Pn = np.ones(Agent)
Pnd = np.ones(Agent)
Q = np.zeros([Node,Node])
theta = np.zeros(Node)
D = list()  # 创建一个空列表
# 值为 1 行向量
sp = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
rp = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
rr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
# susceptance Y set to 3  9*9矩阵
Y = np.array([[0., 0., 0., 3., 0., 0., 0., 0., 0.],
              [0., 0., 0., 0., 0., 0., 0., 3., 0.],
              [0., 0., 0., 0., 0., 3., 0., 0., 0.],
              [3., 0., 0., 0., 3., 0., 0., 0., 3.],
              [0., 0., 0., 3., 0., 3., 0., 0., 0.],
              [0., 0., 3., 0., 3., 0., 3., 0., 0.],
              [0., 0., 0., 0., 0., 3., 0., 3., 0.],
              [0., 3., 0., 0., 0., 0., 3., 0., 3.],
              [0., 0., 0., 3., 0., 0., 0., 3., 0.]])
# line capacity limit C set to 10
C = 10
# np的矩阵,访问时都要先写维度upsilon[0][5]。  upsilon=np.zeros(Node)访问时 upsilon[5]
upsilon = np.zeros(Node)  # [[0. 0. 0. 0. 0. 0. 0. 0. 0.]]    upsilon=np.zeros(Node) [0. 0. 0. 0. 0. 0. 0. 0. 0.]
Pnm = np.array([
    [0., 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2],
    [1.2, 0., 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2],
    [1.2, 1.2, 0., 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2],
    [-3, -3, -3, 0, -3, -3, -3, -3, -3, -3],
    [-3, -3, -3, -3, 0, -3, -3, -3, -3, -3],
    [-3, -3, -3, -3, -3, 0, -3, -3, -3, -3],
    [-3, -3, -3, -3, -3, -3, 0, -3, -3, -3],
    [1.51208665, 1.51208665, 1.51208665, 1.51208665, 1.51208665, 1.51208665, 1.51208665, 0., 1.51208665, 1.51208665],
    [1.73210385, 1.73210385, 1.73210385, 1.73210385, 1.73210385, 1.73210385, 1.73210385, 1.73210385, 0., 1.73210385],
    [1.2394917, 1.2394917, 1.2394917, 1.2394917, 1.2394917, 1.2394917, 1.2394917, 1.2394917, 1.2394917, 0.]
])
Pmn = np.array([
    [0., 1.2, 1.2, -3., -3., -3., -3., 1.51208665, 1.73210385, 1.2394917],
    [1.2, 0., 1.2, -3., -3., -3., -3., 1.51208665, 1.73210385, 1.2394917],
    [1.2, 1.2, 0., -3., -3., -3., -3., 1.51208665, 1.73210385, 1.2394917],
    [1.2, 1.2, 1.2, 0., -3., -3., -3., 1.51208665, 1.73210385, 1.2394917],
    [1.2, 1.2, 1.2, -3., 0., -3., -3., 1.51208665, 1.73210385, 1.2394917],
    [1.2, 1.2, 1.2, -3., -3., 0., -3., 1.51208665, 1.73210385, 1.2394917],
    [1.2, 1.2, 1.2, -3., -3., -3., 0., 1.51208665, 1.73210385, 1.2394917],
    [1.2, 1.2, 1.2, -3., -3., -3., -3., 0., 1.73210385, 1.2394917],
    [1.2, 1.2, 1.2, -3., -3., -3., -3., 1.51208665, 0., 1.2394917],
    [1.2, 1.2, 1.2, -3., -3., -3., -3., 1.51208665, 1.73210385, 0.]
])
Rnm = np.array([
    [0., 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3],
    [0.3, 0., 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3],
    [0.3, 0.3, 0., 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3],
    [0.6, 0.6, 0.6, 0., 0.6, 0.6, 0.6, 0.6, 0.6, 0.6],
    [0.6, 0.6, 0.6, 0.6, 0., 0.6, 0.6, 0.6, 0.6, 0.6],
    [0.6, 0.6, 0.6, 0.6, 0.6, 0., 0.6, 0.6, 0.6, 0.6],
    [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0., 0.6, 0.6, 0.6],
    [-0.36904073, -0.36904073, -0.36904073, -0.36904073, -0.36904073, -0.36904073, -0.36904073, 0., -0.36904073,
     -0.36904073],
    [-0.43788537, -0.43788537, -0.43788537, -0.43788537, -0.43788537, -0.43788537, -0.43788537, -0.43788537, 0.,
     -0.43788537],
    [-0.37178668, -0.37178668, -0.37178668, -0.37178668, -0.37178668, -0.37178668, -0.37178668, -0.37178668,
     -0.37178668, 0.]
])
Rmn = np.array([
    [0., 0.3, 0.3, 0.6, 0.6,
     0.6, 0.6, -0.36904073, -0.43788537, -0.37178668],
    [0.3, 0., 0.3, 0.6, 0.6,
     0.6, 0.6, -0.36904073, -0.43788537, -0.37178668],
    [0.3, 0.3, 0., 0.6, 0.6,
     0.6, 0.6, -0.36904073, -0.43788537, -0.37178668],
    [0.3, 0.3, 0.3, 0., 0.6,
     0.6, 0.6, -0.36904073, -0.43788537, -0.37178668],
    [0.3, 0.3, 0.3, 0.6, 0.,
     0.6, 0.6, -0.36904073, -0.43788537, -0.37178668],
    [0.3, 0.3, 0.3, 0.6, 0.6,
     0., 0.6, -0.36904073, -0.43788537, -0.37178668],
    [0.3, 0.3, 0.3, 0.6, 0.6,
     0.6, 0., -0.36904073, -0.43788537, -0.37178668],
    [0.3, 0.3, 0.3, 0.6, 0.6,
     0.6, 0.6, 0., -0.43788537, -0.37178668],
    [0.3, 0.3, 0.3, 0.6, 0.6,
     0.6, 0.6, -0.36904073, 0., -0.37178668],
    [0.3, 0.3, 0.3, 0.6, 0.6,
     0.6, 0.6, -0.36904073, -0.43788537, 0.]
])
#(10,10)
nambda = np.array([[0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                   [1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                   [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                   [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                   [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                   [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                   [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0],
                   [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0],
                   [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0],
                   [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0],
                   ])
#(10,10)
nu = np.array([
    [0., 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
    [0.5, 0., 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
    [0.5, 0.5, 0., 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
    [0.5, 0.5, 0.5, 0., 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
    [0.5, 0.5, 0.5, 0.5, 0., 0.5, 0.5, 0.5, 0.5, 0.5],
    [0.5, 0.5, 0.5, 0.5, 0.5, 0., 0.5, 0.5, 0.5, 0.5],
    [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0., 0.5, 0.5, 0.5],
    [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0., 0.5, 0.5],
    [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0., 0.5],
    [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.]
])
#(10,10)
rho = np.array([
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
])
#Product Differentiation
# (10,9)  the bilateral trading coefficients ce
ce = np.array([
    [0.18447107, 0.06796034, 0.21545427, 0.01614946, 0.17825825,
      0.2628553, 0.11141357, 0.07227144, 0.07835285],
     [0.09482136, 0.11940156, 0.12395501, 0.04226214, 0.14276371,
      0.18302767, 0.02346861, 0.07798958, 0.0284423],
     [0.02324624, 0.20897061, 0.02958907, 0.26804229, 0.11049331,
      0.06107771, 0.13690522, 0.22769225, 0.13528905],
     [-0.25518422, -0.01939223, -0.22036774, -0.13974602, -0.19668333,
      -0.15597505, -0.01435314, -0.29800283, -0.19202235],
     [-0.04335807, -0.22429847, -0.19119189, -0.16825702, -0.28146012,
      -0.01614729, -0.2214771, -0.10701172, -0.03961165],
     [-0.11114574, -0.12612013, -0.02215256, -0.1483369, -0.18612756,
      -0.25865623, -0.01140046, -0.22585735, -0.13584673],
     [-0.18671743, -0.24339523, -0.03615245, -0.02033565, -0.08485203,
      -0.1328804, -0.2862733, -0.03301455, -0.19565988],
     [0.29926557, 0.11388159, 0.29447886, 0.26929396, 0.06155438,
      0.16440275, 0.2227117, 0.17911357, 0.2480995],
     [0.15520324, 0.09572035, 0.14903983, 0.08656959, 0.13174022,
      0.17005825, 0.28123487, 0.12917856, 0.09242307],
     [0.29715336, 0.29581532, 0.0067241, 0.08071404, 0.00817507,
      0.2041185, 0.1540092, 0.21921541, 0.12070907]
     ])
# (10,9)  the bilateral trading coefficients  cr
cr = np.array([
    [0.26526939, 0.0872581, 0.05510271, 0.17357169, 0.11876129,
     0.29290035, 0.01170689, 0.07258105, 0.29787853],
    [0.21017385, 0.07275489, 0.25849702, 0.27464298, 0.26565637,
     0.17797074, 0.17945836, 0.16809999, 0.04874295],
    [0.07256169, 0.28100508, 0.00978977, 0.26867896, 0.00637186,
     0.09132107, 0.18129405, 0.18381813, 0.0340699],
    [0.22794954, 0.25805707, 0.09958741, 0.14475199, 0.25322422,
     0.29031086, 0.15492972, 0.09024273, 0.27386263],
    [0.08727772, 0.11916848, 0.2246241, 0.13282199, 0.08642119,
     0.26879095, 0.00225222, 0.23944251, 0.14449709],
    [0.08323162, 0.14382573, 0.19330994, 0.09352649, 0.07510286,
     0.05700764, 0.20668001, 0.23869249, 0.25554179],
    [0.00183234, 0.16949883, 0.05077139, 0.01659413, 0.14651389,
     0.0005398, 0.28380611, 0.23432768, 0.24297414],
    [-0.11241334, -0.14688582, -0.28566153, -0.22613753, -0.21871083,
     -0.21352913, -0.26206094, -0.10532953, -0.05602786],
    [-0.13107983, -0.08094349, -0.16298107, -0.03958424, -0.06078483,
     -0.26031804, -0.03398294, -0.01628921, -0.07415996],
    [-0.09128954, -0.29692204, -0.07542404, -0.10677664, -0.06488286,
     -0.03549237, -0.1063708, -0.21261139, -0.01625665]
])
ap = [0.0268421, 0.032509, 0.03344902, 0.03002829, 0.03013494, 0.02786869, 0.02659559, 0.02659559, 0.02659559,
      0.01374924]
bp = [18.17118851, 13.46648686, 19.01831371, 12.76995239, 13.81266098, 10.53575171, 12.0423567, 5.35287456, 7.32211284,
      6.01829901]
ar = [0.01531685, 0.01334619, 0.01199157, 0.01533958, 0.01064932, 0.01375052, 0.01767215, 0, 0, 0]
br = [6.08448819, 6.29846625, 5.1931366, 7.87124777, 6.7928998, 8.87497089, 5.34986574, 1, 1, 1]
Pmin = [0,0,0,-28.25608803,-24.68502485,-23.30595242,-39.00067896,15.1208665,17.3210385,12.39491696]
Pmax =[26.61464563, 27.95906462,22.44780405, -5.07381831, -6.01752026,-9.56109449,-5.79104892, 15.1208665,17.3210385, 12.39491696]
Rmin = [0,0,0,0,0,0,0,-3.69040734,-4.37885371,-3.71786683]
Rmax = [4.48105108,4.79425229,7.55961693,6.81105921,7.25511833,5.27682313,5.14578347,-3.69040734,-4.37885371,-3.71786683]

while (np.sum(sp) > 0.001 or np.sum(sr) > 0.001 or np.sum(rp) > 0.001 or np.sum(rr) > 0.001 or dso > 0.01) and k <= 1000:
    for i in range(Agent):
        # Pnd[i] = np.sum(Pnm[i])
        Pn[i] = np.sum(Pnm[i])
    Q, theta, dso = DSO(Node, Pn, Y, C)
    D.append(dso)

    for i in range(3):
        Pnmi = np.delete(Pnm[i], i)
        Pmni = np.delete(Pmn[i], i)
        Rnmi = np.delete(Rnm[i], i)
        Rmni = np.delete(Rmn[i], i)
        nambdai = np.delete(nambda[i], i)
        nui = np.delete(nu[i], i)
        rhoi = np.delete(rho[i], i)
        # 返回的Pc Rc 是（9，）的 np 数组  #shapes (9,) (1,10)
        Pc, Rc = agentc(ce[i], cr[i], i, Agent, Node, nambdai, nui, ap[i], bp[i], ar[i], br[i],
                        Pmin[i], Pmax[i], Rmin[i], Rmax[i],
                        Pnmi, Pmni, Rnmi, Rmni, rhoi, Q, Pn, upsilon)
        Ptc = []
        for j in range(9):
            Ptc.append(Pc[j])
        Ptc.insert(i, 0.0)
        Rtc = []
        for j in range(9):
            Rtc.append(Rc[j])
        Rtc.insert(i, 0.0)
        sp[i] = np.sum((Ptc - Pnm[i]) * (Ptc - Pnm[i]))
        sr[i] = np.sum((Rtc - Rnm[i]) * (Rtc - Rnm[i]))
        Pnm[i] = Ptc
        Rnm[i] = Rtc

    for i in range(3, 7):
        Pnmi = np.delete(Pnm[i], i)
        Pmni = np.delete(Pmn[i], i)
        Rnmi = np.delete(Rnm[i], i)
        Rmni = np.delete(Rmn[i], i)
        nambdai = np.delete(nambda[i], i)
        nui = np.delete(nu[i], i)
        rhoi = np.delete(rho[i], i)
        Pu, Ru = agentu(ce[i], cr[i], i, Agent, Node, nambdai, nui, ap[i], bp[i], ar[i], br[i],
                        Pmin[i], Pmax[i], Rmin[i], Rmax[i],
                        Pnmi, Pmni, Rnmi, Rmni, rhoi, Q, Pn, upsilon)
        Ptu = []
        for j in range(9):
            Ptu.append(Pu[j])
        Ptu.insert(i, 0.0)
        Rtu = []
        for j in range(9):
            Rtu.append(Ru[j])
        Rtu.insert(i, 0.0)
        sp[i] = np.sum((Ptu - Pnm[i]) * (Ptu - Pnm[i]))
        sr[i] = np.sum((Rtu - Rnm[i]) * (Rtu - Rnm[i]))
        Pnm[i] = Ptu
        Rnm[i] = Rtu

    for i in range(7, 10):
        Pnmi = np.delete(Pnm[i], i)
        Pmni = np.delete(Pmn[i], i)
        Rnmi = np.delete(Rnm[i], i)
        Rmni = np.delete(Rmn[i], i)
        nambdai = np.delete(nambda[i], i)
        nui = np.delete(nu[i], i)
        rhoi = np.delete(rho[i], i)
        Pw, Rw = agentw(ce[i], cr[i], i, Agent, Node, nambdai, nui, ap[i], bp[i], ar[i], br[i],
                        Pmin[i], Pmax[i], Rmin[i], Rmax[i],
                        Pnmi, Pmni, Rnmi, Rmni, rhoi, Q, Pn, upsilon)
        Ptw = []
        for j in range(9):
            Ptw.append(Pw[j])
        Ptw.insert(i, 0.0)
        Rtw = []
        for j in range(9):
            Rtw.append(Rw[j])
        Rtw.insert(i, 0.0)
        sp[i] = np.sum((Ptw - Pnm[i]) * (Ptw - Pnm[i]))
        sr[i] = np.sum((Rtw - Rnm[i]) * (Rtw - Rnm[i]))
        Pnm[i] = Ptw
        Rnm[i] = Rtw



    for i in range(Agent):
        Pnm[i][i] = 0
        Pmn[i][i] = 0
        Rnm[i][i] = 0
        Rmn[i][i] = 0
        nambda[i][i] = 0
        nu[i][i] = 0
        rho[i][i] = 0
#交换
    for i in range(Agent):
        for j in range(Agent):
            Pmn[i][j] = Pnm[j][i]
            Rmn[i][j] = Rnm[j][i]

    for i in range(Agent):
        nambda[i] = nambda[i] - rho[i] * (Pnm[i] + Pmn[i]) / 2
        nu[i] = nu[i] - rho[i] * (Rnm[i] + Rmn[i]) / 2

    upsilon[0] = max(upsilon[0] + (Pn[0] + Pn[3] - np.sum(Q[0])), 0)
    upsilon[1] = max(upsilon[1] + (Pn[1] - np.sum(Q[1])), 0)
    upsilon[2] = max(upsilon[2] + (Pn[2] - np.sum(Q[2])), 0)
    upsilon[3] = max(upsilon[3] + (-np.sum(Q[3])), 0)
    upsilon[4] = max(upsilon[4] + (Pn[4] + Pn[7] - np.sum(Q[4])), 0)
    upsilon[5] = max(upsilon[5] + (-np.sum(Q[5])), 0)
    upsilon[6] = max(upsilon[6] + (Pn[5] + Pn[8] - np.sum(Q[6])), 0)
    upsilon[7] = max(upsilon[7] + (-np.sum(Q[7])), 0)
    upsilon[8] = max(upsilon[8] + (Pn[6] + Pn[9] - np.sum(Q[8])), 0)

    for i in range(Agent):
        rp[i] = np.sum((Pnm[i] + Pmn[i]) * (Pnm[i] + Pmn[i]) )
        rr[i] = np.sum((Rnm[i] + Rmn[i]) * (Rnm[i] + Rmn[i]) )


    resultrp.append(np.sum(rp))
    resultrr.append(np.sum(rr))
    resultsp.append(np.sum(sp))
    resultsr.append(np.sum(sr))

    k += 1


print("Pnm:",Pnm,"\nRnm:",Rnm,"\nupsilon:",upsilon)